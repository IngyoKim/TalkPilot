// Mocks generated by Mockito 5.4.6 from annotations
// in talk_pilot/test/services/stt/cpm_calculate_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:firebase_database/firebase_database.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:talk_pilot/src/models/user_model.dart' as _i5;
import 'package:talk_pilot/src/services/database/database_service.dart' as _i7;
import 'package:talk_pilot/src/services/database/user_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseDatabase_0 extends _i1.SmartFake
    implements _i2.FirebaseDatabase {
  _FakeFirebaseDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i3.UserService {
  @override
  _i4.Future<void> writeUser(
    _i5.UserModel? user, {
    bool? onlyIfAbsent = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeUser,
              [user],
              {#onlyIfAbsent: onlyIfAbsent},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i5.UserModel?> readUser(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#readUser, [uid]),
            returnValue: _i4.Future<_i5.UserModel?>.value(),
            returnValueForMissingStub: _i4.Future<_i5.UserModel?>.value(),
          )
          as _i4.Future<_i5.UserModel?>);

  @override
  _i4.Future<void> updateUser(String? uid, Map<String, dynamic>? updates) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [uid, updates]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteUser(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [uid]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> initUser(_i6.User? firebaseUser, {String? loginMethod}) =>
      (super.noSuchMethod(
            Invocation.method(
              #initUser,
              [firebaseUser],
              {#loginMethod: loginMethod},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i7.DatabaseService {
  @override
  _i2.FirebaseDatabase get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _FakeFirebaseDatabase_0(
              this,
              Invocation.getter(#database),
            ),
            returnValueForMissingStub: _FakeFirebaseDatabase_0(
              this,
              Invocation.getter(#database),
            ),
          )
          as _i2.FirebaseDatabase);

  @override
  _i4.Future<void> writeDB(String? path, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#writeDB, [path, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<T?> readDB<T>(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#readDB, [path]),
            returnValue: _i4.Future<T?>.value(),
            returnValueForMissingStub: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<void> updateDB(String? path, Map<String, dynamic>? updates) =>
      (super.noSuchMethod(
            Invocation.method(#updateDB, [path, updates]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDB(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDB, [path]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<T>> fetchDB<T>({
    required String? path,
    required T Function(Map<String, dynamic>)? fromMap,
    _i2.Query? query,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchDB, [], {
              #path: path,
              #fromMap: fromMap,
              #query: query,
            }),
            returnValue: _i4.Future<List<T>>.value(<T>[]),
            returnValueForMissingStub: _i4.Future<List<T>>.value(<T>[]),
          )
          as _i4.Future<List<T>>);
}
