// Mocks generated by Mockito 5.4.6 from annotations
// in talk_pilot/test/services/project/script_progress_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:talk_pilot/src/models/project_model.dart' as _i2;
import 'package:talk_pilot/src/services/database/project_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProjectModel_0 extends _i1.SmartFake implements _i2.ProjectModel {
  _FakeProjectModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProjectService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectService extends _i1.Mock implements _i3.ProjectService {
  MockProjectService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get basePath =>
      (super.noSuchMethod(
            Invocation.getter(#basePath),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#basePath),
            ),
          )
          as String);

  @override
  _i5.Future<_i2.ProjectModel> writeProject({
    required String? title,
    required String? description,
    required String? ownerUid,
    required Map<String, String>? participants,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#writeProject, [], {
              #title: title,
              #description: description,
              #ownerUid: ownerUid,
              #participants: participants,
            }),
            returnValue: _i5.Future<_i2.ProjectModel>.value(
              _FakeProjectModel_0(
                this,
                Invocation.method(#writeProject, [], {
                  #title: title,
                  #description: description,
                  #ownerUid: ownerUid,
                  #participants: participants,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.ProjectModel>);

  @override
  _i5.Future<_i2.ProjectModel?> readProject(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#readProject, [id]),
            returnValue: _i5.Future<_i2.ProjectModel?>.value(),
          )
          as _i5.Future<_i2.ProjectModel?>);

  @override
  _i5.Future<void> updateProject(String? id, Map<String, dynamic>? updates) =>
      (super.noSuchMethod(
            Invocation.method(#updateProject, [id, updates]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteProject(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProject, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.ProjectModel>> fetchProjects(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#fetchProjects, [uid]),
            returnValue: _i5.Future<List<_i2.ProjectModel>>.value(
              <_i2.ProjectModel>[],
            ),
          )
          as _i5.Future<List<_i2.ProjectModel>>);

  @override
  _i5.Future<void> initProject(_i2.ProjectModel? project) =>
      (super.noSuchMethod(
            Invocation.method(#initProject, [project]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
